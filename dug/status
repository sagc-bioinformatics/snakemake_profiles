#!/bin/bash

JOB_ID="$1"

# Ensure provided JOB_ID is a number
re='^[0-9]+$'
if ! [[ ${JOB_ID} =~ $re ]] ; then
   >&2 echo "ERROR: JOB_ID Not a number: ${JOB_ID}"
   echo unknown
   exit 1
fi

# Generic retry function with up to 5 retry attempts
function retry {
  local max_attempts=5
  local delay_sec=5

  local attempt=1
  while true; do
    "$@" && break || {
      if [[ ${attempt} -lt ${max_attempts} ]]; then
        >&2 echo "WARN: Command ($@) failed attempt ${attempt} of ${max_attempts}:"
        sleep ${delay_sec}
      else
        >&2 echo "ERROR: Command ($@) failed after ${attempt} attempt(s)."
        exit 1
      fi
      ((attempt++))
    }
  done
}

set -o pipefail
STATE=$(retry sacct --format state --parsable2 --jobs "${JOB_ID}" --noheader | fgrep -v -e '.batch' || squeue --format "%T" --jobs "${JOB_ID}" --noheader 2> /dev/null)

# STATEs not dealt with: DEADLINE, RESIZING, REVOKED
case "${STATE}" in
	*RUNNING*|*PENDING*|*SUSPENDED*|*COMPLETING*|*CONFIGURING* )
		echo running
                exit 0
		;;
	*COMPLETED* )
		echo success
                exit 0
		;;
	*BOOT_FAIL*|*CANCELLED*|*FAILED*|*NODE_FAIL*|*PREEMPTED*|*SPECIAL_EXIT*|*STOPPED*|*TIMEOUT*|*OUT_OF_MEMORY* )
		echo failed
		exit 0
		;;
	*SPECIAL_EXIT* )
		# Job exited with no-zero state but can be requeued
		echo running
		#scontrol requeue "${JOB_ID}"
		;;
	"" )
		# Slurm knows nothing about the provided Job_ID
		echo failed
		exit 0
		;;
	* )
		# Assume anything else returned by Slurm is indicative of the job still running
		echo running
		exit 0
		;;
esac

exit 1
